/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package menu;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.data.category.DefaultCategoryDataset;
import com.toedter.calendar.JDateChooser;
import javax.swing.*;

import java.awt.*;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import org.jfree.chart.plot.PlotOrientation;

/**
 *
 * @author User
 */
public class statis extends javax.swing.JFrame {
    /**
     * Creates new form statis
     */
    public statis() {
        initComponents();
        afficherGraphique();
        afficherGraphique3();
        afficherGraphiqu();
       afficherGraphiqueParType();
       afficherGraphiqueParMontant();
         Calendar calendar = Calendar.getInstance();     
calendar.add(Calendar.DAY_OF_MONTH, -1);

     Date yesterday = calendar.getTime();

// Définir la date dans le composant JDateChooser
        dateChooser.setDate(yesterday);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        graphe1 = new javax.swing.JPanel();
        graphe4 = new javax.swing.JPanel();
        graphe3 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        dateChooser = new com.toedter.calendar.JDateChooser();
        graphe44 = new javax.swing.JPanel();
        graphe45 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setViewportBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jPanel1.setBackground(new java.awt.Color(226, 234, 244));
        jPanel1.setPreferredSize(new java.awt.Dimension(1200, 2803));

        graphe1.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout graphe1Layout = new javax.swing.GroupLayout(graphe1);
        graphe1.setLayout(graphe1Layout);
        graphe1Layout.setHorizontalGroup(
            graphe1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        graphe1Layout.setVerticalGroup(
            graphe1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 440, Short.MAX_VALUE)
        );

        graphe4.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout graphe4Layout = new javax.swing.GroupLayout(graphe4);
        graphe4.setLayout(graphe4Layout);
        graphe4Layout.setHorizontalGroup(
            graphe4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1132, Short.MAX_VALUE)
        );
        graphe4Layout.setVerticalGroup(
            graphe4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
        );

        graphe3.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout graphe3Layout = new javax.swing.GroupLayout(graphe3);
        graphe3.setLayout(graphe3Layout);
        graphe3Layout.setHorizontalGroup(
            graphe3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1132, Short.MAX_VALUE)
        );
        graphe3Layout.setVerticalGroup(
            graphe3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 486, Short.MAX_VALUE)
        );

        jButton1.setBackground(new java.awt.Color(0, 153, 153));
        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("voir gestion de transaction");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/menu/graphe.jpg"))); // NOI18N
        jLabel1.setText("Stastisque de données");

        dateChooser.setDateFormatString("yyyy-MM-dd");
        dateChooser.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                dateChooserPropertyChange(evt);
            }
        });

        graphe44.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout graphe44Layout = new javax.swing.GroupLayout(graphe44);
        graphe44.setLayout(graphe44Layout);
        graphe44Layout.setHorizontalGroup(
            graphe44Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        graphe44Layout.setVerticalGroup(
            graphe44Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 390, Short.MAX_VALUE)
        );

        graphe45.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout graphe45Layout = new javax.swing.GroupLayout(graphe45);
        graphe45.setLayout(graphe45Layout);
        graphe45Layout.setHorizontalGroup(
            graphe45Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        graphe45Layout.setVerticalGroup(
            graphe45Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 374, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(234, 234, 234))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(116, 116, 116)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(dateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(graphe3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(graphe4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(graphe1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(graphe44, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(graphe45, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(250, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(91, 91, 91)
                .addComponent(graphe1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(95, 95, 95)
                .addComponent(graphe4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(65, 65, 65)
                .addComponent(dateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(graphe3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(48, 48, 48)
                .addComponent(graphe44, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(69, 69, 69)
                .addComponent(graphe45, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(120, 120, 120))
        );

        jScrollPane1.setViewportView(jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1514, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 2802, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
   
    private void afficherGraphique() {
        ChartPanel chartPanel = creerPanelGraphique();

        graphe1.removeAll(); // Supprimer les composants précédents
        graphe1.add(chartPanel, BorderLayout.CENTER); // Ajouter le nouveau ChartPanel au centre du graphe
        graphe1.revalidate(); // Revalider le layout
        graphe1.repaint();
    }

    private ChartPanel creerPanelGraphique() {
        // Connexion à la base de données
        String SUrl = "jdbc:mysql://localhost:3306/matel";
        String SUser = "root";
        String SPass = "";

        // Requête SQL pour obtenir le montant total par année
        String requete = "SELECT YEAR(tradate) AS annee, SUM(amount) AS montant_total " +
                         "FROM tra " +
                         "GROUP BY YEAR(tradate)";

        DefaultCategoryDataset dataset = new DefaultCategoryDataset();

        try (Connection con = DriverManager.getConnection(SUrl, SUser, SPass);
             PreparedStatement stmt = con.prepareStatement(requete);
             ResultSet rs = stmt.executeQuery()) {

            while (rs.next()) {
                int annee = rs.getInt("annee");
                double montantTotal = rs.getDouble("montant_total");
                dataset.addValue(montantTotal, "Montant total", Integer.toString(annee));
            }

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erreur lors de l'accès à la base de données : " + e.getMessage(), "Erreur", JOptionPane.ERROR_MESSAGE);
        }

        // Création du graphique en barres
        JFreeChart barChart = ChartFactory.createBarChart(
                "Montant total par année",   // Titre du graphique
                "Année",                    // Axe des abscisses
                "Montant total",            // Axe des ordonnées
                dataset,                    // Dataset contenant les données
                PlotOrientation.VERTICAL,   // Orientation du graphique
                true,                       // Inclure les légendes
                true,                       // Afficher les tooltips
                false                       // Ne pas afficher les URLs
        );

        // Définition de la couleur des barres et des propriétés du plot
        CategoryPlot plot = barChart.getCategoryPlot();
        plot.setBackgroundPaint(Color.LIGHT_GRAY); // Couleur de fond du graphique
        BarRenderer renderer = (BarRenderer) plot.getRenderer();
        renderer.setSeriesPaint(0, Color.BLUE);
        renderer.setMaximumBarWidth(0.03);

        // Création du panel de chart
        ChartPanel chartPanel = new ChartPanel(barChart);
        chartPanel.setPreferredSize(new Dimension(graphe1.getWidth(), graphe1.getHeight()));
         graphe1.setLayout(new BorderLayout());
        graphe1.add(chartPanel, BorderLayout.CENTER);
        return chartPanel;
    }
     // FIN ANNEE 
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
         trans d;
     d = new trans();
        d.setVisible(true);
       
        d.pack();
        d.setLocationRelativeTo(null); 
        this.dispose();    
    }//GEN-LAST:event_jButton1ActionPerformed

    private void dateChooserPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_dateChooserPropertyChange
      afficherGraphique3();
    }//GEN-LAST:event_dateChooserPropertyChange

    //Date sélectionnée
    private void afficherGraphique3(){
        Date dateSelectionnee = dateChooser.getDate();

        if (dateSelectionnee != null) {
            System.out.println("Date sélectionnée : " + dateSelectionnee);

            ChartPanel chartPanel = creerGraphique(dateSelectionnee);
            if (chartPanel != null) {
                graphe3.removeAll(); // Supprimer les composants précédents
                graphe3.add(chartPanel, BorderLayout.CENTER); // Ajouter le nouveau ChartPanel au centre du graphe3
                graphe3.revalidate(); // Revalider le layout
                graphe3.repaint();
            } else {
                System.out.println("Le ChartPanel est nul, le graphique n'a pas été créé correctement.");
            }
        } else {
            System.out.println("La date doit être sélectionnée.");
        }
    }

    private ChartPanel creerGraphique(Date dateSelectionnee) {
        // Connexion à la base de données
       String SUrl = "jdbc:mysql://localhost:3306/matel";
    String SUser = "root";
    String SPass = "";

    // Format de la date pour la requête SQL (mois et année seulement)
    SimpleDateFormat sd = new SimpleDateFormat("yyyy-MM");
    String dateStr = sd.format(dateSelectionnee);

    System.out.println("Requête SQL avec le mois : " + dateStr);

    // Requête SQL pour obtenir le montant total par année pour le mois sélectionné
    String requete = "SELECT YEAR(tradate) AS annee, SUM(amount) AS montant_total " +
                     "FROM tra " +
                     "WHERE DATE_FORMAT(tradate, '%Y-%m') = ? " +
                     "GROUP BY YEAR(tradate)";

    DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        try (Connection con = DriverManager.getConnection(SUrl, SUser, SPass);
             PreparedStatement stmt = con.prepareStatement(requete)) {

            stmt.setString(1, dateStr);

            try (ResultSet rs = stmt.executeQuery()) {
                while (rs.next()) {
                    int annee = rs.getInt("annee");
                    double montantTotal = rs.getDouble("montant_total");
                    System.out.println("Année: " + annee + ", Montant total: " + montantTotal);
                    dataset.addValue(montantTotal, "Montant total", Integer.toString(annee));
                }
            }

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erreur lors de l'accès à la base de données : " + e.getMessage(), "Erreur", JOptionPane.ERROR_MESSAGE);
            return null;
        }

        // Création du graphique en barres
        JFreeChart barChart = ChartFactory.createBarChart(
                "Montant total par année pour " + dateStr, // Titre du graphique
                "Année",                                    // Axe des abscisses
                "Montant total",                            // Axe des ordonnées
                dataset,                                    // Dataset contenant les données
                PlotOrientation.VERTICAL,                   // Orientation du graphique
                true,                                       // Inclure les légendes
                true,                                       // Afficher les tooltips
                false                                       // Ne pas afficher les URLs
        );

        // Définition de la couleur des barres et des propriétés du plot
        CategoryPlot plot = barChart.getCategoryPlot();
        plot.setBackgroundPaint(Color.LIGHT_GRAY); // Couleur de fond du graphique
        BarRenderer renderer = (BarRenderer) plot.getRenderer();
        renderer.setSeriesPaint(0, Color.BLUE);
        renderer.setMaximumBarWidth(0.03);

        // Création du panel de chart
        ChartPanel chartPanel = new ChartPanel(barChart);
        chartPanel.setPreferredSize(new Dimension(graphe3.getWidth(), graphe3.getHeight()));
         graphe3.setLayout(new BorderLayout());
        graphe3.add(chartPanel, BorderLayout.CENTER);
        return chartPanel;
    }
    //FIN Date sélectionnée
    
     private void afficherGraphiqu() {
        // Création du dataset pour le graphique
        DefaultCategoryDataset dataset = createDataset();

        // Création du graphique en barres
        JFreeChart barChart = createBarChart(dataset);

        // Création du panel de chart
        ChartPanel chartPanel = new ChartPanel(barChart);
         graphe4.setLayout(new BorderLayout());
        graphe4.add(chartPanel, BorderLayout.CENTER);
        chartPanel.setPreferredSize(new Dimension(graphe4.getWidth(), graphe4.getHeight()));

        // Affichage du graphique dans graphe4
        graphe4.removeAll(); // Supprimer les composants précédents
        graphe4.add(chartPanel, BorderLayout.CENTER); // Ajouter le nouveau ChartPanel au centre du graphe4
        graphe4.revalidate(); // Revalider le layout
        graphe4.repaint();
    }

    private DefaultCategoryDataset createDataset() {
        // Connexion à la base de données
        String SUrl = "jdbc:mysql://localhost:3306/matel";
        String SUser = "root";
        String SPass = "";

        // Requête SQL pour obtenir le montant total par status
        String query = "SELECT status, SUM(amount) AS total_amount " +
                       "FROM tra " +
                       "GROUP BY status";

        DefaultCategoryDataset dataset = new DefaultCategoryDataset();

        try (Connection con = DriverManager.getConnection(SUrl, SUser, SPass);
             PreparedStatement stmt = con.prepareStatement(query);
             ResultSet rs = stmt.executeQuery()) {

            while (rs.next()) {
                String status = rs.getString("status");
                double totalAmount = rs.getDouble("total_amount");
                dataset.addValue(totalAmount, "Montant total", status);
            }

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erreur lors de l'accès à la base de données : " + e.getMessage(), "Erreur", JOptionPane.ERROR_MESSAGE);
        }

        return dataset;
    }

    private JFreeChart createBarChart(DefaultCategoryDataset dataset) {
        // Création du graphique en barres
        JFreeChart barChart = ChartFactory.createBarChart(
                "Montant total par status",    // Titre du graphique
                "status",                      // Axe des abscisses
                "Montant total",               // Axe des ordonnées
                dataset,                       // Dataset contenant les données
                PlotOrientation.VERTICAL,      // Orientation du graphique
                true,                          // Inclure les légendes
                true,                          // Afficher les tooltips
                false                          // Ne pas afficher les URLs
        );

        // Personnalisation du graphique
        CategoryPlot plot = barChart.getCategoryPlot();
        plot.setBackgroundPaint(Color.LIGHT_GRAY); // Couleur de fond du graphique
        BarRenderer renderer = (BarRenderer) plot.getRenderer();
        renderer.setSeriesPaint(0, Color.BLUE);
        renderer.setMaximumBarWidth(0.03);

        return barChart;
    }
    
    
    
    
    private void afficherGraphiqueParType() {
        // Création du dataset pour le graphique
        DefaultCategoryDataset dataset = createDatasetParType();

        if (dataset != null) {
            // Création du graphique en barres
            JFreeChart barChart = createBarChart1(dataset);

            // Création du panel de chart
            ChartPanel chartPanel = new ChartPanel(barChart);
            chartPanel.setPreferredSize(new Dimension(graphe44.getWidth(), graphe44.getHeight()));
              graphe44.setLayout(new BorderLayout());
        graphe44.add(chartPanel, BorderLayout.CENTER);
            // Affichage du graphique dans graphe44
            graphe44.removeAll(); // Supprimer les composants précédents
            graphe44.add(chartPanel, BorderLayout.CENTER); // Ajouter le nouveau ChartPanel au centre du graphe44
            graphe44.revalidate(); // Revalider le layout
            graphe44.repaint();
        }
    }

    private DefaultCategoryDataset createDatasetParType() {
        // Connexion à la base de données
        String SUrl = "jdbc:mysql://localhost:3306/matel";
        String SUser = "root";
        String SPass = "";

        // Requête SQL pour obtenir le nombre total par type
        String query = "SELECT type, COUNT(*) AS total_count " +
                       "FROM tra " +
                       "GROUP BY type";

        DefaultCategoryDataset dataset = new DefaultCategoryDataset();

        try (Connection con = DriverManager.getConnection(SUrl, SUser, SPass);
             PreparedStatement stmt = con.prepareStatement(query);
             ResultSet rs = stmt.executeQuery()) {

            while (rs.next()) {
                String type = rs.getString("type");
                int totalCount = rs.getInt("total_count");
                System.out.println("Type: " + type + ", Nombre total: " + totalCount);
                dataset.addValue(totalCount, "Nombre total", type);
            }

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erreur lors de l'accès à la base de données : " + e.getMessage(), "Erreur", JOptionPane.ERROR_MESSAGE);
            return null;
        }

        return dataset;
    }

    private JFreeChart createBarChart1(DefaultCategoryDataset dataset) {
        // Création du graphique en barres
        JFreeChart barChart = ChartFactory.createBarChart(
                "Nombre total par type",     // Titre du graphique
                "Type",                      // Axe des abscisses
                "Nombre total",              // Axe des ordonnées
                dataset,                     // Dataset contenant les données
                PlotOrientation.VERTICAL,    // Orientation du graphique
                true,                        // Inclure les légendes
                true,                        // Afficher les tooltips
                false                        // Ne pas afficher les URLs
        );

        // Personnalisation du graphique
        CategoryPlot plot = barChart.getCategoryPlot();
        plot.setBackgroundPaint(Color.LIGHT_GRAY); // Couleur de fond du graphique
        BarRenderer renderer = (BarRenderer) plot.getRenderer();
        renderer.setSeriesPaint(0, Color.BLUE);
        renderer.setMaximumBarWidth(0.03);

        return barChart;
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    //DEBUT 
     private void afficherGraphiqueParMontant() {
        // Création du dataset pour le graphique
        DefaultCategoryDataset dataset = createDatasetParMontant();

        if (dataset != null) {
            // Création du graphique en barres
            JFreeChart barChart = createBarChart2(dataset);

            // Création du panel de chart
            ChartPanel chartPanel = new ChartPanel(barChart);
            chartPanel.setPreferredSize(new Dimension(graphe45.getWidth(), graphe45.getHeight()));
             graphe45.setLayout(new BorderLayout());
        graphe45.add(chartPanel, BorderLayout.CENTER);
            // Affichage du graphique dans graphe45
            graphe45.removeAll(); // Supprimer les composants précédents
            graphe45.add(chartPanel, BorderLayout.CENTER); // Ajouter le nouveau ChartPanel au centre du graphe45
            graphe45.revalidate(); // Revalider le layout
            graphe45.repaint();
        }
    }

     
    private DefaultCategoryDataset createDatasetParMontant() {
        // Connexion à la base de données
        String SUrl = "jdbc:mysql://localhost:3306/matel";
        String SUser = "root";
        String SPass = "";

        // Requête SQL pour obtenir le nombre total par montant
        String query = "SELECT amount, COUNT(*) AS total_count " +
                       "FROM tra " +
                       "GROUP BY amount";

        DefaultCategoryDataset dataset = new DefaultCategoryDataset();

        try (Connection con = DriverManager.getConnection(SUrl, SUser, SPass);
             PreparedStatement stmt = con.prepareStatement(query);
             ResultSet rs = stmt.executeQuery()) {

            while (rs.next()) {
                double amount = rs.getDouble("amount");
                int totalCount = rs.getInt("total_count");
                System.out.println("Montant: " + amount + ", Nombre total: " + totalCount);
                dataset.addValue(totalCount, "Nombre total", Double.toString(amount));
            }

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erreur lors de l'accès à la base de données : " + e.getMessage(), "Erreur", JOptionPane.ERROR_MESSAGE);
            return null;
        }

        return dataset;
    }

    private JFreeChart createBarChart2(DefaultCategoryDataset dataset) {
        // Création du graphique en barres
        JFreeChart barChart = ChartFactory.createBarChart(
                "Nombre total par montant",     // Titre du graphique
                "Montant",                     // Axe des abscisses
                "Nombre total",                // Axe des ordonnées
                dataset,                       // Dataset contenant les données
                PlotOrientation.VERTICAL,      // Orientation du graphique
                true,                          // Inclure les légendes
                true,                          // Afficher les tooltips
                false                          // Ne pas afficher les URLs
        );

        // Personnalisation du graphique
        CategoryPlot plot = barChart.getCategoryPlot();
        plot.setBackgroundPaint(Color.LIGHT_GRAY); // Couleur de fond du graphique
        BarRenderer renderer = (BarRenderer) plot.getRenderer();
        renderer.setSeriesPaint(0, Color.BLUE);
        renderer.setMaximumBarWidth(0.03);

        return barChart;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(statis.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(statis.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(statis.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(statis.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new statis().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser dateChooser;
    private javax.swing.JPanel graphe1;
    private javax.swing.JPanel graphe3;
    private javax.swing.JPanel graphe4;
    private javax.swing.JPanel graphe44;
    private javax.swing.JPanel graphe45;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
